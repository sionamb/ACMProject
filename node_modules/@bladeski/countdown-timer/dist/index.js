import $8jlsA$swchelperssrc_define_propertymjs from "@swc/helpers/src/_define_property.mjs";


let $5ed8f398fbaaeb94$export$e08a55a4d816e6b7;
(function(CountdownEventName) {
    CountdownEventName["START"] = "countdownStart";
    CountdownEventName["STOP"] = "countdownStop";
    CountdownEventName["END"] = "countdownEnd";
    CountdownEventName["RESET"] = "countdownReset";
})($5ed8f398fbaaeb94$export$e08a55a4d816e6b7 || ($5ed8f398fbaaeb94$export$e08a55a4d816e6b7 = {}));


let $5c527a672e96473f$export$9373bfe41ffbb85;
(function(TimeInMs) {
    TimeInMs[TimeInMs["SECONDS"] = 1000] = "SECONDS";
    TimeInMs[TimeInMs["MINUTES"] = 60000] = "MINUTES";
    TimeInMs[TimeInMs["HOURS"] = 3600000] = "HOURS";
})($5c527a672e96473f$export$9373bfe41ffbb85 || ($5c527a672e96473f$export$9373bfe41ffbb85 = {}));


let $6e63d3a0efaed98e$export$d9e59215631231e3;
(function(TimeUnit) {
    TimeUnit["HOURS"] = "hour";
    TimeUnit["MINUTES"] = "minute";
    TimeUnit["SECONDS"] = "second";
})($6e63d3a0efaed98e$export$d9e59215631231e3 || ($6e63d3a0efaed98e$export$d9e59215631231e3 = {}));




class $0750533c852b7517$export$41795c4ae22973ac extends HTMLElement {
    get timeLeft() {
        return [
            this.hoursLeft,
            this.minutesLeft,
            this.secondsLeft
        ];
    }
    connectedCallback() {
        this.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Bungee&display=swap');
      </style>`;
    }
    setCountdownLength(countdownLength, hideZeroedUnits = false) {
        if (typeof countdownLength[0] !== "number" || typeof countdownLength[1] !== "number" || typeof countdownLength[2] !== "number") throw new Error("Hours, minutes and seconds need to be a valid number");
        this.hideZeroedUnits = hideZeroedUnits;
        this.hoursLeft = countdownLength[0];
        this.minutesLeft = countdownLength[1];
        this.secondsLeft = countdownLength[2];
        this.setTimeUnitValue(this.hoursLeft, (0, $6e63d3a0efaed98e$export$d9e59215631231e3).HOURS);
        this.setTimeUnitValue(this.minutesLeft, (0, $6e63d3a0efaed98e$export$d9e59215631231e3).MINUTES);
        this.setTimeUnitValue(this.secondsLeft, (0, $6e63d3a0efaed98e$export$d9e59215631231e3).SECONDS);
        this.setStartStopButtonDisabled();
        this.setClass();
    }
    startCountdown() {
        const countdownInMs = this.hoursLeft * (0, $5c527a672e96473f$export$9373bfe41ffbb85).HOURS + this.minutesLeft * (0, $5c527a672e96473f$export$9373bfe41ffbb85).MINUTES + this.secondsLeft * (0, $5c527a672e96473f$export$9373bfe41ffbb85).SECONDS;
        this.endTime = new Date();
        this.endTime.setTime(this.endTime.getTime() + countdownInMs + (0, $5c527a672e96473f$export$9373bfe41ffbb85).SECONDS);
        this.setTimeValue();
        this.startStopButton.classList.remove("countdown-stopped");
        this.startStopButton.classList.add("countdown-started");
        this.startStopButton.blur();
        this.triggerEvent((0, $5ed8f398fbaaeb94$export$e08a55a4d816e6b7).START);
        this.interval = window.setInterval(()=>{
            this.updateCountdown();
        }, 50);
    }
    stopCountdown() {
        if (this.interval) {
            clearInterval(this.interval);
            this.interval = undefined;
            this.startStopButton.classList.add("countdown-stopped");
            this.startStopButton.classList.remove("countdown-started");
            this.triggerEvent((0, $5ed8f398fbaaeb94$export$e08a55a4d816e6b7).STOP);
        }
    }
    reset() {
        this.stopCountdown();
        this.endTime = undefined;
        this.hoursLeft = 0;
        this.minutesLeft = 0;
        this.secondsLeft = 0;
        this.setCountdownLength([
            0,
            0,
            0
        ], false);
        this.triggerEvent((0, $5ed8f398fbaaeb94$export$e08a55a4d816e6b7).RESET);
    }
    focus() {
        this.startStopButton.focus();
    }
    onStartStopClick() {
        if (this.interval) this.stopCountdown();
        else {
            this.setCountdownLength([
                this.hoursLeft,
                this.minutesLeft,
                this.secondsLeft
            ], this.hideZeroedUnits);
            this.startCountdown();
        }
    }
    updateCountdown() {
        if (this.endTime) {
            const { hours: hours , minutes: minutes , seconds: seconds  } = this.getRemainingTime(this.endTime);
            if (hours !== this.hoursLeft) {
                this.hoursLeft = hours;
                this.setTimeUnitValue(this.hoursLeft, (0, $6e63d3a0efaed98e$export$d9e59215631231e3).HOURS);
            }
            if (minutes !== this.minutesLeft) {
                this.minutesLeft = minutes;
                this.setTimeUnitValue(this.minutesLeft, (0, $6e63d3a0efaed98e$export$d9e59215631231e3).MINUTES);
            }
            if (seconds !== this.secondsLeft) {
                this.secondsLeft = seconds;
                this.setTimeUnitValue(this.secondsLeft, (0, $6e63d3a0efaed98e$export$d9e59215631231e3).SECONDS);
            }
            this.setClass();
            if (hours <= 0 && minutes <= 0 && seconds <= 0) {
                this.interval && this.triggerEvent((0, $5ed8f398fbaaeb94$export$e08a55a4d816e6b7).END);
                this.stopCountdown();
            }
            this.setStartStopButtonDisabled();
        }
    }
    getRemainingTime(endTime) {
        const currentTime = new Date();
        const timeLeft = endTime.getTime() - currentTime.getTime();
        const hours = Math.floor(timeLeft / (0, $5c527a672e96473f$export$9373bfe41ffbb85).HOURS);
        const minutes = Math.floor(timeLeft / (0, $5c527a672e96473f$export$9373bfe41ffbb85).MINUTES) % 60;
        const seconds = Math.floor(timeLeft / (0, $5c527a672e96473f$export$9373bfe41ffbb85).SECONDS) % 60;
        return {
            hours: hours,
            minutes: minutes,
            seconds: seconds
        };
    }
    setStartStopButtonDisabled() {
        const isDisabled = this.hoursLeft <= 0 && this.minutesLeft <= 0 && this.secondsLeft <= 0;
        this.startStopButton.disabled = isDisabled;
        this.startStopButton.ariaDisabled = `${isDisabled}`;
    }
    setTimeValue() {
        this.setTimeUnitValue(this.hoursLeft, (0, $6e63d3a0efaed98e$export$d9e59215631231e3).HOURS);
        this.setTimeUnitValue(this.minutesLeft, (0, $6e63d3a0efaed98e$export$d9e59215631231e3).MINUTES);
        this.setTimeUnitValue(this.secondsLeft, (0, $6e63d3a0efaed98e$export$d9e59215631231e3).SECONDS);
    }
    setTimeUnitValue(value, unit) {
        const valueString = value.toLocaleString(undefined, {
            minimumIntegerDigits: 2,
            useGrouping: false
        });
        const unitElements = this.countdownContainer.querySelectorAll(`.${unit}-value`);
        if (unitElements.length === 2) {
            unitElements[0].textContent = valueString[0];
            unitElements[1].textContent = valueString[1];
        }
    }
    setClass() {
        this.countdownContainer.classList.remove("hide-hours");
        this.countdownContainer.classList.remove("hide-minutes");
        this.countdownContainer.classList.add("hours");
        this.countdownContainer.classList.add("minutes");
        this.countdownContainer.classList.add("seconds");
        if (this.hideZeroedUnits && this.hoursLeft <= 0) {
            this.countdownContainer.classList.add("hide-hours");
            if (this.minutesLeft <= 0) this.countdownContainer.classList.add("hide-minutes");
        }
        if (this.hoursLeft === 0) {
            this.countdownContainer.classList.remove("hours");
            if (this.minutesLeft === 0) {
                this.countdownContainer.classList.remove("minutes");
                if (this.secondsLeft === 0) this.countdownContainer.classList.remove("seconds");
            }
        }
    }
    triggerEvent(eventName, payload) {
        const event = new CustomEvent(eventName, {
            bubbles: true,
            cancelable: false,
            composed: true,
            detail: payload
        });
        this.dispatchEvent(event);
    }
    getStyles(baseFontSize = 28) {
        return `
      :host {
        --body-font-size: ${baseFontSize}px;
        --font-size-l: 1.5em;
        --font-size-xl: 2.25em;
        --font-size-xxl: 3.375em;
        --font-size-xxxl: 5.063em;
        --font-size-xxxxl: 7.594em;

        --padding-small: 0.5rem;
        --padding-regular: 1rem;
        --padding-large: 2.5rem;

        --default-transition: 250ms ease-in-out;

        --primary-font-colour: #fcfcfc;

        font-size: var(--body-font-size);
        color: var(--primary-font-colour);
        line-height: 1.5;
        text-align: justify;
      }

      button {
        display: flex;
        padding: var(--padding-small);
        border: none;
        background-color: transparent;
        font-size: var(--font-size-xxl);
        opacity: 0.2;
        transition: opacity var(--default-transition);
      }
      
      button:hover:not(:disabled):not([aria-disabled='true']),
      button:active:not(:disabled):not([aria-disabled='true']),
      button:focus:not(:disabled):not([aria-disabled='true']) {
        opacity: 1;
      }

      #StartStopButton {
        padding: 0;
        box-sizing: border-box;
        height: calc(3 * var(--body-font-size));        
        border-color: transparent transparent transparent var(--primary-font-colour);
        transition: border-style 100ms ease-in-out, border-width 100ms ease-in-out, opacity var(--default-transition);
        will-change: border-width;
        cursor: pointer;
        border-style: solid;
        border-width: calc(1.5 * var(--body-font-size)) 0 calc(1.5 * var(--body-font-size)) calc(2.5*var(--body-font-size));
      }

      #StartStopButton.countdown-started {
        border-style: double;
        border-width: 0px 0 0px calc(2.5*var(--body-font-size));
      }

      .countdown-timer {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }

      .countdown-timer.hide-hours .time-container {
        grid-template-columns: 1fr 1fr auto 1fr 1fr;
        font-size: var(--font-size-xxl);
      }

      .countdown-timer.hide-hours .hour-value,
      .countdown-timer.hide-hours .hour-divider {
        display: none;
      }

      .countdown-timer.hide-minutes .time-container {
        grid-template-columns: 1fr 1fr auto;
        font-size: var(--font-size-xxxl);
      }

      .countdown-timer.hide-minutes .minute-value,
      .countdown-timer.hide-minutes .minute-divider {
        display: none;
      }

      .time-container {
        display: grid;
        grid-template-columns: 1fr 1fr repeat(2, auto 1fr 1fr);
        align-items: baseline;

        font-family: 'Bungee', sans-serif;
        font-size: var(--font-size-xl);

        transition: font-size var(--default-transition);
      }

      .time-container.hours .hour-value,
      .time-container.hours .hour-divider,
      .time-container.minutes .minute-value,
      .time-container.minutes .minute-divider,
      .time-container.seconds .second-value {
        opacity: 1;
      }

      .hour-value,
      .minute-value,
      .second-value,
      .hour-divider,
      .minute-divider {
        opacity: 0.5;
        transition: opacity var(--default-transition);
      }

      .time-container span:nth-of-type(3n) {
        text-align: center;
      }

      .time-container span:nth-of-type(3n + 1) {
        text-align: right;
      }

      .time-container span:nth-of-type(3n + 2) {
        text-align: left;
      }

      @media screen and (min-width: 680px) {
        .time-container {
          font-size: var(--font-size-xxl);
        }

        .countdown-timer.hide-hours .time-container {
          font-size: var(--font-size-xxxl);
        }

        .countdown-timer.hide-minutes .time-container {
          font-size: var(--font-size-xxxxl);
        }
      }
    `;
    }
    constructor(){
        super();
        (0, $8jlsA$swchelperssrc_define_propertymjs)(this, "hoursLeft", 0);
        (0, $8jlsA$swchelperssrc_define_propertymjs)(this, "minutesLeft", 0);
        (0, $8jlsA$swchelperssrc_define_propertymjs)(this, "secondsLeft", 0);
        (0, $8jlsA$swchelperssrc_define_propertymjs)(this, "hideZeroedUnits", false);
        const shadow = this.attachShadow({
            mode: "open"
        });
        if (this.shadowRoot) this.shadowRoot.innerHTML = `
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Bungee&display=swap" rel="stylesheet">
        <span class="mdi mdi-home"></span>
      `;
        this.countdownContainer = document.createElement("div");
        this.countdownContainer.classList.add("countdown-timer");
        const baseFontSize = parseInt(this.getAttribute("data-base-font-size") || "");
        this.countdownContainer.innerHTML = `
      <style>${this.getStyles(isNaN(baseFontSize) ? undefined : baseFontSize)}</style>
      <div class="time-container hours minutes seconds">
        <span class="hour-value"></span>
        <span class="hour-value"></span>
        <span class="hour-divider">:</span>
        <span class="minute-value"></span>
        <span class="minute-value"></span>
        <span class="minute-divider">:</span>
        <span class="second-value"></span>
        <span class="second-value"></span>
      </div>
      <button id="StartStopButton" class="countdown-stopped" aria-label="Start/pause the countdown" aria-disabled="true" disabled>
      </button>
    `;
        this.setCountdownLength = this.setCountdownLength.bind(this);
        this.startCountdown = this.startCountdown.bind(this);
        this.stopCountdown = this.stopCountdown.bind(this);
        this.reset = this.reset.bind(this);
        const startStopButton = this.countdownContainer.querySelector("button#StartStopButton");
        if (startStopButton instanceof Element) {
            this.startStopButton = startStopButton;
            this.startStopButton.addEventListener("click", this.onStartStopClick.bind(this));
        } else throw new Error("There was a problem configuring the Countdown component.");
        this.reset();
        shadow.appendChild(this.countdownContainer);
    }
}
customElements.define("countdown-component", $0750533c852b7517$export$41795c4ae22973ac);


export {$0750533c852b7517$export$41795c4ae22973ac as CountdownComponent};
//# sourceMappingURL=index.js.map
