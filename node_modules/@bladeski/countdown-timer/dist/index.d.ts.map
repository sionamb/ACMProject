{"mappings":"AIEA,+BAAgC,SAAQ,WAAW;IACjD,IAAW,QAAQ,aAElB;;IAgED,iBAAiB;IAOV,kBAAkB,CAAC,eAAe,EAAE,MAAM,EAAE,EAAE,eAAe,UAAQ;IAsBrE,cAAc;IAsBd,aAAa;IAYb,KAAK;IAWL,KAAK;CAkQb;AAID,QAAQ,MAAM,CAAC;IACb,UAAU,qBAAqB;QAC7B,qBAAqB,EAAE,kBAAkB,CAAA;KAC1C;CACF","sources":["src/components/src/enums/CountdownEventName.enum.ts","src/components/src/enums/TimeInMs.enum.ts","src/components/src/enums/TimeUnit.enum.ts","src/components/src/enums/index.ts","src/components/src/components/CountdownComponent.ts","src/components/CountdownComponent.ts"],"sourcesContent":[null,null,null,null,null,"import { CountdownEventName, TimeInMs, TimeUnit } from '../enums';\n\nexport class CountdownComponent extends HTMLElement {\n  public get timeLeft() {\n    return [this.hoursLeft, this.minutesLeft, this.secondsLeft];\n  }\n\n  private readonly countdownContainer: HTMLElement;\n  private startStopButton: HTMLButtonElement;\n  private endTime?: Date;\n  private interval?: number;\n  private hoursLeft: number = 0;\n  private minutesLeft: number = 0;\n  private secondsLeft: number = 0;\n  private hideZeroedUnits = false;\n\n  constructor() {\n    super();\n    \n    const shadow = this.attachShadow({ mode: 'open' });\n\n    if (this.shadowRoot) {\n      this.shadowRoot.innerHTML = `\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n        <link href=\"https://fonts.googleapis.com/css2?family=Bungee&display=swap\" rel=\"stylesheet\">\n        <span class=\"mdi mdi-home\"></span>\n      `;\n    }\n\n    this.countdownContainer = document.createElement('div');\n    this.countdownContainer.classList.add('countdown-timer');\n\n    const baseFontSize = parseInt(this.getAttribute('data-base-font-size') || '');\n\n    this.countdownContainer.innerHTML = `\n      <style>${this.getStyles(isNaN(baseFontSize) ? undefined : baseFontSize)}</style>\n      <div class=\"time-container hours minutes seconds\">\n        <span class=\"hour-value\"></span>\n        <span class=\"hour-value\"></span>\n        <span class=\"hour-divider\">:</span>\n        <span class=\"minute-value\"></span>\n        <span class=\"minute-value\"></span>\n        <span class=\"minute-divider\">:</span>\n        <span class=\"second-value\"></span>\n        <span class=\"second-value\"></span>\n      </div>\n      <button id=\"StartStopButton\" class=\"countdown-stopped\" aria-label=\"Start/pause the countdown\" aria-disabled=\"true\" disabled>\n      </button>\n    `;\n\n    this.setCountdownLength = this.setCountdownLength.bind(this);\n    this.startCountdown = this.startCountdown.bind(this);\n    this.stopCountdown = this.stopCountdown.bind(this);\n    this.reset = this.reset.bind(this);\n\n    const startStopButton = this.countdownContainer.querySelector('button#StartStopButton');\n\n    if (startStopButton instanceof Element) {\n      this.startStopButton = startStopButton as HTMLButtonElement;\n      this.startStopButton.addEventListener('click', this.onStartStopClick.bind(this));\n    } else {\n      throw new Error('There was a problem configuring the Countdown component.')\n    }\n\n    this.reset();\n    shadow.appendChild(this.countdownContainer);\n  }\n\n  connectedCallback() {\n    this.innerHTML = `\n      <style>\n        @import url('https://fonts.googleapis.com/css2?family=Bungee&display=swap');\n      </style>`\n  }\n\n  public setCountdownLength(countdownLength: number[], hideZeroedUnits = false) {\n    if (\n      typeof countdownLength[0] !== 'number' ||\n      typeof countdownLength[1] !== 'number' ||\n      typeof countdownLength[2] !== 'number'\n    ) {\n      throw new Error('Hours, minutes and seconds need to be a valid number');\n    }\n    this.hideZeroedUnits = hideZeroedUnits;\n\n    this.hoursLeft = countdownLength[0];\n    this.minutesLeft = countdownLength[1];\n    this.secondsLeft = countdownLength[2];\n    \n    this.setTimeUnitValue(this.hoursLeft, TimeUnit.HOURS);\n    this.setTimeUnitValue(this.minutesLeft, TimeUnit.MINUTES);\n    this.setTimeUnitValue(this.secondsLeft, TimeUnit.SECONDS);\n    \n    this.setStartStopButtonDisabled();\n    this.setClass();\n  }\n\n  public startCountdown() {\n    const countdownInMs =\n      this.hoursLeft * TimeInMs.HOURS +\n      this.minutesLeft * TimeInMs.MINUTES +\n      this.secondsLeft * TimeInMs.SECONDS;\n    \n    this.endTime = new Date();\n    this.endTime.setTime(this.endTime.getTime() + countdownInMs + TimeInMs.SECONDS);\n\n    this.setTimeValue();\n\n    this.startStopButton.classList.remove('countdown-stopped');\n    this.startStopButton.classList.add('countdown-started');\n    this.startStopButton.blur();\n\n    this.triggerEvent(CountdownEventName.START);\n\n    this.interval = window.setInterval(() => {\n      this.updateCountdown();\n    }, 50);\n  }\n\n  public stopCountdown() {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = undefined;\n\n      this.startStopButton.classList.add('countdown-stopped');\n      this.startStopButton.classList.remove('countdown-started');\n      \n      this.triggerEvent(CountdownEventName.STOP);\n    }\n  }\n\n  public reset() {\n    this.stopCountdown();\n    this.endTime = undefined;\n    this.hoursLeft = 0;\n    this.minutesLeft = 0;\n    this.secondsLeft = 0;\n    this.setCountdownLength([0, 0, 0], false);\n    \n    this.triggerEvent(CountdownEventName.RESET);\n  }\n\n  public focus() {\n    this.startStopButton.focus();    \n  }\n\n  private onStartStopClick() {\n    if (this.interval) {\n      this.stopCountdown();\n    } else {\n      this.setCountdownLength([this.hoursLeft, this.minutesLeft, this.secondsLeft], this.hideZeroedUnits);\n      this.startCountdown();\n    }\n  }\n\n  private updateCountdown() {\n    if (this.endTime) {\n      const { hours, minutes, seconds } = this.getRemainingTime(this.endTime);\n      \n      if (hours !== this.hoursLeft) {\n        this.hoursLeft = hours;\n        this.setTimeUnitValue(this.hoursLeft, TimeUnit.HOURS);\n      }\n\n      if (minutes !== this.minutesLeft) {\n        this.minutesLeft = minutes;\n        this.setTimeUnitValue(this.minutesLeft, TimeUnit.MINUTES);\n      }\n\n      if (seconds !== this.secondsLeft) {\n        this.secondsLeft = seconds;\n        this.setTimeUnitValue(this.secondsLeft, TimeUnit.SECONDS);\n      }\n      this.setClass();\n\n      if (hours <= 0 && minutes <= 0 && seconds <= 0) {\n        this.interval && this.triggerEvent(CountdownEventName.END);\n        this.stopCountdown();\n      }\n\n      this.setStartStopButtonDisabled();\n    }\n  }\n\n  private getRemainingTime(endTime: Date) {\n    const currentTime = new Date();\n    const timeLeft = endTime.getTime() - currentTime.getTime();\n    const hours = Math.floor(timeLeft / TimeInMs.HOURS);\n    const minutes = Math.floor(timeLeft / TimeInMs.MINUTES) % 60;\n    const seconds = Math.floor(timeLeft / TimeInMs.SECONDS) % 60;\n\n    return {\n      hours,\n      minutes,\n      seconds\n    };\n  }\n\n  private setStartStopButtonDisabled() {\n    const isDisabled = this.hoursLeft <= 0 && this.minutesLeft <= 0 && this.secondsLeft <= 0;\n    this.startStopButton.disabled = isDisabled;\n    this.startStopButton.ariaDisabled = `${isDisabled}`;\n  }\n\n  private setTimeValue() {\n    this.setTimeUnitValue(this.hoursLeft, TimeUnit.HOURS);\n    this.setTimeUnitValue(this.minutesLeft, TimeUnit.MINUTES);\n    this.setTimeUnitValue(this.secondsLeft, TimeUnit.SECONDS);\n  }\n\n  private setTimeUnitValue(value: number, unit: TimeUnit) {\n    const valueString = value.toLocaleString(undefined, {\n      minimumIntegerDigits: 2,\n      useGrouping: false,\n    });\n    const unitElements = this.countdownContainer.querySelectorAll(`.${unit}-value`);\n    \n    if (unitElements.length === 2) {    \n      unitElements[0].textContent = valueString[0];\n      unitElements[1].textContent = valueString[1];\n    }\n  }\n\n  private setClass() {\n    this.countdownContainer.classList.remove('hide-hours');\n    this.countdownContainer.classList.remove('hide-minutes');\n    this.countdownContainer.classList.add('hours');\n    this.countdownContainer.classList.add('minutes');\n    this.countdownContainer.classList.add('seconds');\n\n    if (this.hideZeroedUnits && this.hoursLeft <= 0) {\n      this.countdownContainer.classList.add('hide-hours');\n\n      if (this.minutesLeft <= 0) {\n        this.countdownContainer.classList.add('hide-minutes');        \n      }\n    }\n\n    if (this.hoursLeft === 0) {\n      this.countdownContainer.classList.remove('hours');\n\n      if (this.minutesLeft === 0) {\n        this.countdownContainer.classList.remove('minutes');\n\n        if (this.secondsLeft === 0) {\n          this.countdownContainer.classList.remove('seconds');\n        }\n      }\n    }\n  }\n\n  private triggerEvent(eventName: CountdownEventName, payload?: any) {\n    const event = new CustomEvent(eventName, {\n      bubbles: true,\n      cancelable: false,\n      composed: true,\n      detail: payload\n    });\n    this.dispatchEvent(event);\n  }\n\n  private getStyles(baseFontSize: number = 28) {\n    return `\n      :host {\n        --body-font-size: ${baseFontSize}px;\n        --font-size-l: 1.5em;\n        --font-size-xl: 2.25em;\n        --font-size-xxl: 3.375em;\n        --font-size-xxxl: 5.063em;\n        --font-size-xxxxl: 7.594em;\n\n        --padding-small: 0.5rem;\n        --padding-regular: 1rem;\n        --padding-large: 2.5rem;\n\n        --default-transition: 250ms ease-in-out;\n\n        --primary-font-colour: #fcfcfc;\n\n        font-size: var(--body-font-size);\n        color: var(--primary-font-colour);\n        line-height: 1.5;\n        text-align: justify;\n      }\n\n      button {\n        display: flex;\n        padding: var(--padding-small);\n        border: none;\n        background-color: transparent;\n        font-size: var(--font-size-xxl);\n        opacity: 0.2;\n        transition: opacity var(--default-transition);\n      }\n      \n      button:hover:not(:disabled):not([aria-disabled='true']),\n      button:active:not(:disabled):not([aria-disabled='true']),\n      button:focus:not(:disabled):not([aria-disabled='true']) {\n        opacity: 1;\n      }\n\n      #StartStopButton {\n        padding: 0;\n        box-sizing: border-box;\n        height: calc(3 * var(--body-font-size));        \n        border-color: transparent transparent transparent var(--primary-font-colour);\n        transition: border-style 100ms ease-in-out, border-width 100ms ease-in-out, opacity var(--default-transition);\n        will-change: border-width;\n        cursor: pointer;\n        border-style: solid;\n        border-width: calc(1.5 * var(--body-font-size)) 0 calc(1.5 * var(--body-font-size)) calc(2.5*var(--body-font-size));\n      }\n\n      #StartStopButton.countdown-started {\n        border-style: double;\n        border-width: 0px 0 0px calc(2.5*var(--body-font-size));\n      }\n\n      .countdown-timer {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .countdown-timer.hide-hours .time-container {\n        grid-template-columns: 1fr 1fr auto 1fr 1fr;\n        font-size: var(--font-size-xxl);\n      }\n\n      .countdown-timer.hide-hours .hour-value,\n      .countdown-timer.hide-hours .hour-divider {\n        display: none;\n      }\n\n      .countdown-timer.hide-minutes .time-container {\n        grid-template-columns: 1fr 1fr auto;\n        font-size: var(--font-size-xxxl);\n      }\n\n      .countdown-timer.hide-minutes .minute-value,\n      .countdown-timer.hide-minutes .minute-divider {\n        display: none;\n      }\n\n      .time-container {\n        display: grid;\n        grid-template-columns: 1fr 1fr repeat(2, auto 1fr 1fr);\n        align-items: baseline;\n\n        font-family: 'Bungee', sans-serif;\n        font-size: var(--font-size-xl);\n\n        transition: font-size var(--default-transition);\n      }\n\n      .time-container.hours .hour-value,\n      .time-container.hours .hour-divider,\n      .time-container.minutes .minute-value,\n      .time-container.minutes .minute-divider,\n      .time-container.seconds .second-value {\n        opacity: 1;\n      }\n\n      .hour-value,\n      .minute-value,\n      .second-value,\n      .hour-divider,\n      .minute-divider {\n        opacity: 0.5;\n        transition: opacity var(--default-transition);\n      }\n\n      .time-container span:nth-of-type(3n) {\n        text-align: center;\n      }\n\n      .time-container span:nth-of-type(3n + 1) {\n        text-align: right;\n      }\n\n      .time-container span:nth-of-type(3n + 2) {\n        text-align: left;\n      }\n\n      @media screen and (min-width: 680px) {\n        .time-container {\n          font-size: var(--font-size-xxl);\n        }\n\n        .countdown-timer.hide-hours .time-container {\n          font-size: var(--font-size-xxxl);\n        }\n\n        .countdown-timer.hide-minutes .time-container {\n          font-size: var(--font-size-xxxxl);\n        }\n      }\n    `;\n  }\n}\n\ncustomElements.define('countdown-component', CountdownComponent);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'countdown-component': CountdownComponent\n  }\n}"],"names":[],"version":3,"file":"index.d.ts.map"}